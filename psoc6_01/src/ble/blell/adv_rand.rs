#[doc = "Register `ADV_RAND` reader"]
pub struct R(crate::R<ADV_RAND_SPEC>);
impl core::ops::Deref for R {
    type Target = crate::R<ADV_RAND_SPEC>;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl From<crate::R<ADV_RAND_SPEC>> for R {
    #[inline(always)]
    fn from(reader: crate::R<ADV_RAND_SPEC>) -> Self {
        R(reader)
    }
}
#[doc = "Field `ADV_RAND` reader - Random ADV delay, to be used for ADV next instant calculation. The granularity is in BT slot"]
pub struct ADV_RAND_R(crate::FieldReader<u8, u8>);
impl ADV_RAND_R {
    pub(crate) fn new(bits: u8) -> Self {
        ADV_RAND_R(crate::FieldReader::new(bits))
    }
}
impl core::ops::Deref for ADV_RAND_R {
    type Target = crate::FieldReader<u8, u8>;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl R {
    #[doc = "Bits 0:3 - Random ADV delay, to be used for ADV next instant calculation. The granularity is in BT slot"]
    #[inline(always)]
    pub fn adv_rand(&self) -> ADV_RAND_R {
        ADV_RAND_R::new((self.bits & 0x0f) as u8)
    }
}
#[doc = "Random number generated by Hardware for ADV NI calculation\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adv_rand](index.html) module"]
pub struct ADV_RAND_SPEC;
impl crate::RegisterSpec for ADV_RAND_SPEC {
    type Ux = u32;
}
#[doc = "`read()` method returns [adv_rand::R](R) reader structure"]
impl crate::Readable for ADV_RAND_SPEC {
    type Reader = R;
}
#[doc = "`reset()` method sets ADV_RAND to value 0x07"]
impl crate::Resettable for ADV_RAND_SPEC {
    #[inline(always)]
    fn reset_value() -> Self::Ux {
        0x07
    }
}
